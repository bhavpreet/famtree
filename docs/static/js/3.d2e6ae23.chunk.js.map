{"version":3,"sources":["sketch.js","../public/Good Brush.otf","../public/button-37.wav","branch.js"],"names":["gp","table","addEntrySound","child","adult","elder","eldest","goodBrushFont","Good_Brush","__webpack_require__","p","button_37","tree","treeB","levelB","treeN","levelN","drawEvenOdd","bnTree","level","entry","angle","parent","PI","drawBranch","maxElems","Math","makeEntry","r","name","relation","age","relatedTo","rsvp","__webpack_exports__","p5_min_default","a","Audio","root","Branch","begin","end","this","finished","jitter","x","y","show","dir","p5","len","mag","neg","branch","factor","width","newEnd","height","getRowCount","drawTable","t","i","length","numNew","v0","normalize","img","scale","pop","textStack","isNew","lines","maxLength","_i","v"],"mappings":"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","file":"static/js/3.d2e6ae23.chunk.js","sourcesContent":["import p5 from 'p5';\nimport footerBgLeft from \"../public/invitation-footer-left-min.webp\";\nimport footerBgRight from \"../public/invitation-footer-right-min.webp\";\nimport goodBrushFontFile from '../public/Good Brush.otf';\nimport Branch from \"./branch.js\";\nimport addSoundFile from \"../public/button-37.wav\"\nimport app from \"./index.js\";\n//Based on Daniel Shiffman's Object Oriented tree generation\n\n//family tree forming for Nat and Bhav\n//to-do: n\n// 1.basic tree branching with inputs/mouse click\n// 2.publish on web, html (done: localhost)\n// 3.input field, show when hover\n// 4.define input fields, eg. color code as per age\nvar gp;\nvar tree = [];\nvar leaves = [];\nvar table;\nvar treeB = [];\nvar levelB = 2;\nvar treeN = [];\nvar levelN = 2;\n\nvar height = 400\nlet addEntrySound;\nlet child;\nlet adult;\nlet elder;\nlet eldest;\nlet goodBrushFont;\n// let lastShownEntry;\n\nexport default drawBranch\n\nlet sketch = function(p) {\n    gp = p;\n    //level of interaction : keypress n and b\n\n    //var angle = PI/4; //45 degree\n    //var len = 50;\n    //var root;\n\n    //instead of making a root, making an array of tree and storing\n    //the root and other branch values in the array\n\n    p.preload = function() {\n        table = p.loadTable('https://docs.google.com/spreadsheets/d/1ugOJeRIHwUR36fp1-MawZqqw1_X29q4nrLiKM_gu9FI/gviz/tq\\?tqx\\=out:csv\\&sheet\\=Sheet1', 'csv', 'header');\n        goodBrushFont = p.loadFont (goodBrushFontFile);\n        // p5.soundFormats('mp3');\n        // addEntrySound = p.loadSound('button-37');\n        addEntrySound = new Audio(addSoundFile);\n    }\n\n    p.windowResized = function () {\n        gp.resizeCanvas(p.windowWidth, p.windowHeight / 1.5);\n        gp.redraw();\n    }\n\n    p.setup = function() {\n        p.createCanvas(p.windowWidth, p.windowHeight / 1.5);\n        // p.createCanvas(400, 400);\n        p.textSize(23);\n\n        // Load PNGs\n        child = p.loadImage(\"04_young-min.png\");\n        adult = p.loadImage(\"03_adult-min.png\");\n        elder = p.loadImage(\"02_elder-min.png\");\n        eldest = p.loadImage(\"01_eldest-min.png\");\n        // vector here stores the start point and end point\n        // a vector has magnitude and direction\n        var a = p.createVector (p.width/2, p.height); //startpoint\n        var b = p.createVector (p.width/2, p.height - (p.height / 4.5)); //endpoint\n        var root = new Branch (a, b, 0); //starting first branch line |\n        tree[0] = root; //storing the root in the tree array\n        tree.push(tree[0].branch(p, -p.PI/4.5, 1));\n        tree[tree.length-1].entry = makeEntry(0);\n        treeN.push(tree[tree.length-1]);\n        tree.push(tree[0].branch(p, p.PI/4.5, 1));\n        tree[tree.length-1].entry = makeEntry(1);\n        treeB.push(tree[tree.length-1]);\n\n        //var newBranch = root.branch(); //new branch came out of the root\n        //tree[1] = newBranch;\n        //console.log(tree);\n        drawTable(table);\n    }\n\n\n    p.draw = function() {\n        p.background(255);\n        let t;\n        // showing tree array\n        for ( var i = 0; i < tree.length; i++) {\n            t = tree[i]\n            t.show(p);\n        }\n\n        // flowers\n        let numNew = 0;\n        for (var i=1; i < tree.length; i++) {\n            let scale = 35;\n            t = tree[i];\n\n            let dir = p5.Vector.sub(t.end, t.begin);\n\n            let v0 = p.createVector(dir.x, dir.y);\n            v0.normalize();\n            //v0.mult(2);\n\n            // p.fill(230,2,45);\n            // p.noStroke();\n            // p.ellipse(t.leaf.x,t.leaf.y, 5, 5); //red\n\n            //flowers to be written here\n\n            p.push();\n            p.translate(t.begin.x, t.begin.y);\n            p.rotate(dir.heading());\n            p.translate(dir.mag()+(scale/2.1), 0);\n            p.imageMode(p.CENTER);\n            p.rotate(p.PI/2);\n\n            //ageGroup = [ \"Young at ðŸ’–\", \"Above 50\", \"30-50\", \"20-30\", \"< 20\"]\n\n            let img = child;\n            if (t.entry.age  == \"Young at ðŸ’–\" ) {\n                img = child;\n            } else if (t.entry.age  == \"Above 50\" ) {\n                img = eldest;\n            } else if (t.entry.age  == \"30-50\" ) {\n                img = elder;\n            } else if (t.entry.age  == \"20-30\" ) {\n                img = adult;\n            } else if (t.entry.age  == \"< 20\"){\n                img = child;\n            }\n\n            let d = p.dist(p.mouseX, p.mouseY, v0.x*scale*0.75 + t.end.x, v0.y*scale*0.75 + t.end.y);\n            if (d < scale/2 || t.entry.isNew  == true ) {\n                p.image(img, 0, 0, scale * 2.1, scale * 2.1);\n                if (t.entry.isNew == true) {\n                    numNew++;\n                }\n                    \n            } else {\n                p.image(img, 0, 0, scale, scale);\n            }\n\n            p.pop();\n\n            // if (d < scale/2 && t.entry.isNew  != true ) {\n            //     if (t.entry.relatedTo == \"Natasha\") {\n            //         p.push();\n            //         // p.fill(144,175,131);\n            //         p.fill(255);\n            //         p.stroke(0);\n            //         p.textFont(goodBrushFont);\n            //         p.textSize(20);\n            //         // p.textLeading(120);\n            //         p.textAlign(p.RIGHT);\n            //         p.text(t.entry.name, p.width/2 - 20, p.height - 40);\n            //         p.text(t.entry.relation, p.width/2 - 20, p.height - 20);\n            //         p.pop();\n            //     } else {\n            //          p.push();\n            //         p.fill(255);\n            //         p.stroke(0);\n            //         p.textFont(goodBrushFont);\n            //         p.textSize(20);\n            //         // p.textLeading(120);\n            //         p.textAlign(p.LEFT);\n            //         p.text(t.entry.name, p.width/2 + 20, p.height - 40);\n            //         p.text(t.entry.relation, p.width/2 + 20, p.height - 20);\n            //         p.pop();\n            //     }\n            // }\n        }\n\n        // text\n        let textStack = [];\n        let scale = 35;\n        for (var i=1; i < tree.length; i++) {\n            let t = tree[i];\n            let dir = p5.Vector.sub(t.end, t.begin);\n\n            let v0 = p.createVector(dir.x, dir.y);\n            v0.normalize();\n            //v0.mult(2);\n\n            //greenzone\n            // p.noStroke();\n            // p.fill(2,200,5);\n            // p.ellipse(v0.x*scale*0.75 + t.leaf.x, v0.y*scale*0.75 + t.leaf.y, scale/3, scale/3); //green\n\n            //text to be written here\n\n            let d = p.dist(p.mouseX, p.mouseY, v0.x*scale*0.75 + t.end.x, v0.y*scale*0.75 + t.end.y);\n            //console.log (dir.x);\n            if (d < scale/2 || t.entry.isNew) {\n                textStack.push(t);\n            }\n        }\n\n        if (textStack.length > 0) {\n            let lines = \"\";\n            let maxLength = textStack.length;\n            if (numNew != textStack.length) {\n               maxLength -= numNew; \n            }\n            for (let i = 0; i < maxLength; i++) {\n                let t = textStack[i];\n                lines = lines + t.entry.name + \"  / \" + t.entry.relation + \"\\n\"\n            }\n            let v = textStack[0].end;\n            p.stroke(0);\n            p.fill(255);\n            p.textLeading(20);\n            p.textFont(goodBrushFont);\n            p.textSize(16);\n            if (p.width < 600) {\n                if (textStack[0].entry.relatedTo == \"Natasha\") {\n                    p.textAlign(p.LEFT); \n                } else {\n                    p.textAlign(p.RIGHT); \n                }\n            } else {\n                 if (textStack[0].entry.relatedTo == \"Natasha\") {\n                    p.textAlign(p.RIGHT); \n                } else {\n                    p.textAlign(p.LEFT); \n                }\n            }\n            p.text(lines, v.x, v.y);\n        }\n        \n        // if (textStack.length > 0) {\n        //     p.push();\n        //     p.translate(textStack[0].end.x, textStack[0].end.y);\n        //     p.angleMode(p.DEGREES);\n        //     let a = 225;\n        //     p.textAlign(p.RIGHT);\n        //     if (textStack[0].entry.relatedTo == \"Natasha\") {\n        //         a = 270 + 25;\n        //         p.textAlign(p.LEFT);\n        //     }\n        //     for (let i = 0; i < textStack.length; i++, a += 360/textStack.length) {\n        //         t = textStack[i];\n        //         // p.translate(dir);\n        //         p.fill(0);\n        //         //p.textAlign(p.CENTER);\n        //         p.textSize(18);\n        //         // p.noStroke();\n        //         p.textFont(goodBrushFont);\n        //         p.textLeading(120);\n        //         p.fill(255);\n        //         p.stroke(0);\n        //         // p.rotate(selectedEntryAngle++);\n        //         // if (p.width > 600) {\n        //         let rad = 30;\n        //         let x = 0 + p.cos(a) * rad;\n        //         let y = 0 + p.sin(a) * rad;\n        //         p.push();\n        //         p.translate(x, y);\n        //         // p.text(t.entry.name, 0, -1 * (scale + 50));\n        //         // p.text(t.entry.relation, 0, -1 * (scale + 30));\n        //         p.text(t.entry.name, 0, 0);\n        //         // p.text(t.entry.relation, 0, 20);\n        //         p.pop();\n        //         // } else {\n        //         //     // if (t.entry.relatedTo == \"Natasha\") {\n        //         //     //     p.textAlign(p.LEFT);\n        //         //     // } else {\n        //         //     //     p.textAlign(p.RIGHT);\n        //         //     // }\n        //         //     p.textAlign(p.CENTER);\n        //         //     p.text(t.entry.relation, 0, scale + 100 );\n        //         //     p.text(t.entry.name, 0, scale + 80);\n\n        //         //     // p.text(t.entry.name, v0.x*scale, v0.y * scale);\n        //         //     // p.text(t.entry.relation, -v0.x*scale, -v0.y*scale);\n        //         // }\n        //     }\n        //     textStack = [];\n        //     p.angleMode(p.RADIANS);\n        //     p.pop();\n        // }\n\t\t// p.noLoop();\n    }\n};\n\nnew p5(sketch, 'sketchCanvas');\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n    gp.push();\n    gp.stroke(myColor);\n    gp.strokeWeight(3);\n    gp.fill(myColor);\n    gp.translate(base.x, base.y);\n    gp.line(0, 0, vec.x, vec.y);\n    gp.rotate(vec.heading());\n    let arrowSize = 7;\n    gp.translate(vec.mag() - arrowSize, 0);\n    gp.triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n    gp.pop();\n}\n\nfunction drawEvenOdd(bnTree, level, entry) {\n    let angle = 0;\n    if ((bnTree.length - (2 * level + 1)) % 2 == 0) {\n        // console.log(\"even\");\n        parent = (bnTree.length - 1) / 2;\n        // console.log(\"parent: \", parent);\n        // console.log(\"parent node: \", bnTree[parent]);\n        angle = -gp.PI/4.5;\n        tree.push(bnTree[parent].branch(gp, angle, level));\n    } else {\n        // console.log(\"odd\");\n        parent = (bnTree.length - 2) / 2;\n        // console.log(\"parent: \", parent);\n        // console.log(\"parent node: \", bnTree[parent]);\n        angle = gp.PI/5.5;\n        tree.push(bnTree[parent].branch(gp, angle, level));\n    }\n    tree[tree.length-1].entry = entry;\n    tree[tree.length-1].level = level;\n    // console.log(\"Level = \", level);\n    bnTree.push(tree[tree.length-1]);\n    return angle;\n}\n\nfunction drawBranch(entry) {\n    if (entry.relatedTo == \"Natasha\") {\n        var maxElems = Math.pow(2, levelN);\n        let angle = drawEvenOdd(treeN, levelN, entry);\n        if (treeN.length + 1 == maxElems) { // +1 to acomodated for predrawn node \n            levelN += 1\n        }\n        // console.log(\"maxElems = \", maxElems, \"levelN = \", levelN);\n    } else if (entry.relatedTo == \"Bhavpreet\") {\n        var maxElems = Math.pow(2, levelB) ;\n        let angle = drawEvenOdd(treeB, levelB, entry);\n        if (treeB.length + 1== maxElems) { // +1 to acomodated for predrawn node \n            levelB += 1\n            // console.log(\"Updateing levelB= \", levelB);\n        }\n        // console.log(\"maxElems = \", maxElems, \"levelB = \", levelB, \"lenB = \", treeB.length);\n    }\n\n    if (entry.isNew == true) {\n        addEntrySound.play();\n    }\n    //color code name with alpha, rsvp\n    //age\n    //add wedding info\n    //new entry- new color, details- name\n\n}\n\nfunction makeEntry(r) {\n    return { \"name\" : table.getString(r, 0),\n             \"relation\" : table.getString(r,1),\n             \"age\" : table.getString(r,2),\n             \"relatedTo\" : table.getString(r,3),\n             \"rsvp\" : table.getString(r,4)\n           };\n    \n}\n\n// Call Draw branch for each element in the table\nfunction drawTable(table) {\n    // console.log(\"table: \", table);\n    for (let r=2; r < table.getRowCount(); r++) { // 0, 1 are populated at the root level\n        let entry = makeEntry(r);\n        drawBranch(entry, false);\n    }\n}\n\n\n// Save\nfunction saveToFamTree(name, relation) {\n    const Http = new XMLHttpRequest();\n    const url = 'https://script.google.com/macros/s/AKfycbzfGamhVtRvxDPyiqf9yofRX-GdJYGd6HzSx6sITtlgmQv0aJ0/exec?'\n    Http.open(\"GET\", url + \"col1=\" + name + \"&col2=\" + relation);\n    Http.send();\n\n    Http.onreadystatechange = (e) => {\n        console.log(Http.responseText)\n    }\n}\n","export default __webpack_public_path__ + \"static/media/Good Brush.19cfbd40.otf\";","export default __webpack_public_path__ + \"static/media/button-37.c5f8c924.wav\";","import p5 from 'p5';\n\nexport default Branch\n\nfunction Branch (begin, end, level) {\n\tthis.begin = begin;\n\tthis.end = end;\n\tthis.level = level;\n\tthis.finished = false;\n\n\tthis.jitter = function (p) {\n\t\tthis.end.x += p.random(-0.125,0.125);\n\t\tthis.end.y += p.random(-0.125,0.125);\n\t}\n\n\tthis.show = function (p) {\n\t\t//making of the first branch (root)\n\t\tp.push();\n\t\tp.stroke (0);\n\t\tlet sWeight = 15 / ((this.level+1) * 0.8); // +1 to acomodate for 0\n\t\tp.strokeWeight(sWeight);\n\t\t// p.line (this.begin.x, this.begin.y, this.end.x, this.end.y);\n\t\tlet dir = p5.Vector.sub(this.end, this.begin);\n\t\tp.translate(this.begin.x, this.begin.y);\n\t\t// p.rotate(p.PI);\n\t\tp.rotate(dir.heading());\n\t\tlet len = dir.mag();\n\t\t// p.curve(p.random(-2*len,2*len), 0, p.random(-15,15), 0, 0, len, len, 2*len);\n\t\t//p.curve(p.random(-2*len,2*len), 0, 0, 0, len, 0, len, len);\n\t\tlet neg = -1;\n\t\tif (level % 2 == 0) {\n\t\t\tneg = 1;\n\t\t}\n\t\tp.curve(-1.3*len, neg * -len/1.3, 0, 0, len, 0, len*1.5, neg * len/1.5);\n\t\tp.pop();\n\t}\n\n\tthis.branch = function (p, angle, level) {\n\t\t//taking the vector angle, but first giving its direction\n\t\tvar dir = p5.Vector.sub(this.end, this.begin);\n\t\t//p5 vector direction has an inbuilt angle\n\t\tdir.rotate(angle);\n\t\t//making the length shorter than prev one\n\t\t// dir.mult(0.62);\n\t\tlet factor = p.width\n\t\tif (factor > 600) {\n\t\t\tfactor = 600;\n\t\t}\n\t\tdir.mult(0.42 + mapto01(factor));\n\t\t//making a new end point for the new branch\n\t\tvar newEnd = p5.Vector.add(this.end, dir);\n\t\t//new branch shares the previous branch's ending point\n\t\t//as its starting point plus we just made a new end for it\n\t\t//in the previous line\n\n\t\tvar b = new Branch (this.end, newEnd, level);\n\t\t//console.log(newEnd.x, newEnd.y, leaf.x, leaf.y);\n\t\treturn b;\n\t};\n}\n\nfunction mapto01(val) {\n\tlet min = 0;\n\tlet max = 2048;\n\treturn (val - min) / (max - min);\n}\nfunction dsigmoid(y) {\n   // return sigmoid(x) * (1 - sigmoid(x));\n\treturn 1/((1 - 200/y));\n}\n\n\nfunction sigmoid(x) {\n  return 1 / (1 + Math.exp(-x));\n}\n"],"sourceRoot":""}